{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7efed2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "pd.options.display.float_format = '{:,.2f}'.format\n",
    "\n",
    "# setup interactive notebook mode\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n",
    "\n",
    "from IPython.display import display, HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "92661381",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Carrier Code', 'Date (MM/DD/YYYY)', 'Flight Number', 'Tail Number',\n",
       "       'Origin Airport', 'Scheduled Arrival Time', 'Actual Arrival Time',\n",
       "       'Arrival Delay (Minutes)'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Index(['Carrier Code', 'Date (MM/DD/YYYY)', 'Flight Number', 'Tail Number',\n",
       "       'Destination Airport', 'Scheduled departure time',\n",
       "       'Actual departure time', 'Scheduled elapsed time (Minutes)',\n",
       "       'Actual elapsed time (Minutes)', 'Departure delay (Minutes)',\n",
       "       'Wheels-off time', 'Taxi-Out time (Minutes)', 'Delay Carrier (Minutes)',\n",
       "       'Delay Weather (Minutes)', 'Delay National Aviation System (Minutes)',\n",
       "       'Delay Security (Minutes)', 'Delay Late Aircraft Arrival (Minutes)',\n",
       "       'Source Airport'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Carrier Code                       object\n",
       "Date (MM/DD/YYYY)          datetime64[ns]\n",
       "Flight Number                       int64\n",
       "Tail Number                        object\n",
       "Origin Airport                     object\n",
       "Scheduled Arrival Time     datetime64[ns]\n",
       "Actual Arrival Time        datetime64[ns]\n",
       "Arrival Delay (Minutes)             int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Carrier Code                                        object\n",
       "Date (MM/DD/YYYY)                           datetime64[ns]\n",
       "Flight Number                                        int64\n",
       "Tail Number                                         object\n",
       "Destination Airport                                 object\n",
       "Scheduled departure time                    datetime64[ns]\n",
       "Actual departure time                       datetime64[ns]\n",
       "Scheduled elapsed time (Minutes)                     int64\n",
       "Actual elapsed time (Minutes)                        int64\n",
       "Departure delay (Minutes)                            int64\n",
       "Wheels-off time                             datetime64[ns]\n",
       "Taxi-Out time (Minutes)                              int64\n",
       "Delay Carrier (Minutes)                              int64\n",
       "Delay Weather (Minutes)                              int64\n",
       "Delay National Aviation System (Minutes)             int64\n",
       "Delay Security (Minutes)                             int64\n",
       "Delay Late Aircraft Arrival (Minutes)                int64\n",
       "Source Airport                                      object\n",
       "dtype: object"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reading and cleaning flight data\n",
    "# arrivalData = pd.read_csv('/Users/puru/Desktop/Syracuse Courses/Sem 3/Intro to ML/Project/Dataset/Flight_data/Arrivals_details.csv')\n",
    "# departureData = pd.read_csv('/Users/puru/Desktop/Syracuse Courses/Sem 3/Intro to ML/Project/Dataset/Flight_data/final departures-details.csv')\n",
    "\n",
    "arrivalData = pd.read_csv('/Users/puru/Desktop/Syracuse Courses/Sem 3/Intro to ML/Project/Dataset/Flight_data/Detailed_Statistics_Arrivals -final.csv',parse_dates=['Date (MM/DD/YYYY)','Scheduled Arrival Time','Actual Arrival Time'])\n",
    "\n",
    "departureData = pd.read_csv('/Users/puru/Desktop/Syracuse Courses/Sem 3/Intro to ML/Project/Dataset/Flight_data/final departures-details.csv',parse_dates=['Date (MM/DD/YYYY)','Scheduled departure time','Actual departure time','Wheels-off time'])\n",
    "\n",
    "\n",
    "arrivalData\n",
    "departureData.columns\n",
    "arrivalData.dtypes\n",
    "departureData.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cfa0da0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date (MM/DD/YYYY)                           datetime64[ns]\n",
       "Flight Number                                        int64\n",
       "Origin Airport                                      object\n",
       "Scheduled Arrival Time                      datetime64[ns]\n",
       "Actual Arrival Time                         datetime64[ns]\n",
       "Arrival Delay (Minutes)                              int64\n",
       "Scheduled departure time                    datetime64[ns]\n",
       "Actual departure time                       datetime64[ns]\n",
       "Scheduled elapsed time (Minutes)                     int64\n",
       "Actual elapsed time (Minutes)                        int64\n",
       "Departure delay (Minutes)                            int64\n",
       "Wheels-off time                             datetime64[ns]\n",
       "Taxi-Out time (Minutes)                              int64\n",
       "Delay Carrier (Minutes)                              int64\n",
       "Delay Weather (Minutes)                              int64\n",
       "Delay National Aviation System (Minutes)             int64\n",
       "Delay Security (Minutes)                             int64\n",
       "Delay Late Aircraft Arrival (Minutes)                int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date (MM/DD/YYYY)</th>\n",
       "      <th>Flight Number</th>\n",
       "      <th>Origin Airport</th>\n",
       "      <th>Scheduled Arrival Time</th>\n",
       "      <th>Actual Arrival Time</th>\n",
       "      <th>Arrival Delay (Minutes)</th>\n",
       "      <th>Scheduled departure time</th>\n",
       "      <th>Actual departure time</th>\n",
       "      <th>Scheduled elapsed time (Minutes)</th>\n",
       "      <th>Actual elapsed time (Minutes)</th>\n",
       "      <th>Departure delay (Minutes)</th>\n",
       "      <th>Wheels-off time</th>\n",
       "      <th>Taxi-Out time (Minutes)</th>\n",
       "      <th>Delay Carrier (Minutes)</th>\n",
       "      <th>Delay Weather (Minutes)</th>\n",
       "      <th>Delay National Aviation System (Minutes)</th>\n",
       "      <th>Delay Security (Minutes)</th>\n",
       "      <th>Delay Late Aircraft Arrival (Minutes)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2022-01-10</td>\n",
       "      <td>604</td>\n",
       "      <td>DEN</td>\n",
       "      <td>2023-04-17 15:09:00</td>\n",
       "      <td>2023-04-17 15:04:00</td>\n",
       "      <td>-5</td>\n",
       "      <td>2023-04-17 09:49:00</td>\n",
       "      <td>2023-04-17 09:46:00</td>\n",
       "      <td>200</td>\n",
       "      <td>198</td>\n",
       "      <td>-3</td>\n",
       "      <td>2023-04-17 10:03:00</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2022-01-10</td>\n",
       "      <td>1917</td>\n",
       "      <td>ORD</td>\n",
       "      <td>2023-04-17 16:57:00</td>\n",
       "      <td>2023-04-17 16:54:00</td>\n",
       "      <td>-3</td>\n",
       "      <td>2023-04-17 14:10:00</td>\n",
       "      <td>2023-04-17 14:06:00</td>\n",
       "      <td>107</td>\n",
       "      <td>108</td>\n",
       "      <td>-4</td>\n",
       "      <td>2023-04-17 14:32:00</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022-01-10</td>\n",
       "      <td>1998</td>\n",
       "      <td>ORD</td>\n",
       "      <td>2023-04-17 21:18:00</td>\n",
       "      <td>2023-04-17 21:01:00</td>\n",
       "      <td>-17</td>\n",
       "      <td>2023-04-17 18:21:00</td>\n",
       "      <td>2023-04-17 18:15:00</td>\n",
       "      <td>117</td>\n",
       "      <td>106</td>\n",
       "      <td>-6</td>\n",
       "      <td>2023-04-17 18:35:00</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2022-01-10</td>\n",
       "      <td>2198</td>\n",
       "      <td>IAD</td>\n",
       "      <td>2023-04-17 23:31:00</td>\n",
       "      <td>2023-04-17 23:52:00</td>\n",
       "      <td>21</td>\n",
       "      <td>2023-04-17 22:20:00</td>\n",
       "      <td>2023-04-17 22:47:00</td>\n",
       "      <td>71</td>\n",
       "      <td>65</td>\n",
       "      <td>27</td>\n",
       "      <td>2023-04-17 23:01:00</td>\n",
       "      <td>14</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2022-02-10</td>\n",
       "      <td>604</td>\n",
       "      <td>DEN</td>\n",
       "      <td>2023-04-17 15:09:00</td>\n",
       "      <td>2023-04-17 14:55:00</td>\n",
       "      <td>-14</td>\n",
       "      <td>2023-04-17 09:49:00</td>\n",
       "      <td>2023-04-17 09:44:00</td>\n",
       "      <td>200</td>\n",
       "      <td>191</td>\n",
       "      <td>-5</td>\n",
       "      <td>2023-04-17 09:58:00</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>2022-12-30</td>\n",
       "      <td>1998</td>\n",
       "      <td>ORD</td>\n",
       "      <td>2023-04-17 21:07:00</td>\n",
       "      <td>2023-04-17 20:56:00</td>\n",
       "      <td>-11</td>\n",
       "      <td>2023-04-17 18:14:00</td>\n",
       "      <td>2023-04-17 18:11:00</td>\n",
       "      <td>113</td>\n",
       "      <td>105</td>\n",
       "      <td>-3</td>\n",
       "      <td>2023-04-17 18:33:00</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>2022-12-30</td>\n",
       "      <td>2488</td>\n",
       "      <td>EWR</td>\n",
       "      <td>2023-04-17 23:14:00</td>\n",
       "      <td>2023-04-17 23:07:00</td>\n",
       "      <td>-7</td>\n",
       "      <td>2023-04-17 21:59:00</td>\n",
       "      <td>2023-04-17 22:17:00</td>\n",
       "      <td>75</td>\n",
       "      <td>50</td>\n",
       "      <td>18</td>\n",
       "      <td>2023-04-17 22:31:00</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>2022-12-31</td>\n",
       "      <td>604</td>\n",
       "      <td>DEN</td>\n",
       "      <td>2023-04-17 14:58:00</td>\n",
       "      <td>2023-04-17 14:46:00</td>\n",
       "      <td>-12</td>\n",
       "      <td>2023-04-17 09:45:00</td>\n",
       "      <td>2023-04-17 09:48:00</td>\n",
       "      <td>193</td>\n",
       "      <td>178</td>\n",
       "      <td>3</td>\n",
       "      <td>2023-04-17 10:00:00</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>2022-12-31</td>\n",
       "      <td>1998</td>\n",
       "      <td>ORD</td>\n",
       "      <td>2023-04-17 21:08:00</td>\n",
       "      <td>2023-04-17 20:44:00</td>\n",
       "      <td>-24</td>\n",
       "      <td>2023-04-17 18:15:00</td>\n",
       "      <td>2023-04-17 18:06:00</td>\n",
       "      <td>113</td>\n",
       "      <td>98</td>\n",
       "      <td>-9</td>\n",
       "      <td>2023-04-17 18:22:00</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>2022-12-31</td>\n",
       "      <td>2488</td>\n",
       "      <td>EWR</td>\n",
       "      <td>2023-04-17 23:14:00</td>\n",
       "      <td>2023-04-17 00:46:00</td>\n",
       "      <td>92</td>\n",
       "      <td>2023-04-17 21:59:00</td>\n",
       "      <td>2023-04-17 23:33:00</td>\n",
       "      <td>75</td>\n",
       "      <td>73</td>\n",
       "      <td>94</td>\n",
       "      <td>2023-04-17 00:03:00</td>\n",
       "      <td>30</td>\n",
       "      <td>92</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>271 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Date (MM/DD/YYYY)  Flight Number Origin Airport Scheduled Arrival Time  \\\n",
       "0          2022-01-10            604            DEN    2023-04-17 15:09:00   \n",
       "1          2022-01-10           1917            ORD    2023-04-17 16:57:00   \n",
       "2          2022-01-10           1998            ORD    2023-04-17 21:18:00   \n",
       "3          2022-01-10           2198            IAD    2023-04-17 23:31:00   \n",
       "4          2022-02-10            604            DEN    2023-04-17 15:09:00   \n",
       "..                ...            ...            ...                    ...   \n",
       "266        2022-12-30           1998            ORD    2023-04-17 21:07:00   \n",
       "267        2022-12-30           2488            EWR    2023-04-17 23:14:00   \n",
       "268        2022-12-31            604            DEN    2023-04-17 14:58:00   \n",
       "269        2022-12-31           1998            ORD    2023-04-17 21:08:00   \n",
       "270        2022-12-31           2488            EWR    2023-04-17 23:14:00   \n",
       "\n",
       "    Actual Arrival Time  Arrival Delay (Minutes) Scheduled departure time  \\\n",
       "0   2023-04-17 15:04:00                       -5      2023-04-17 09:49:00   \n",
       "1   2023-04-17 16:54:00                       -3      2023-04-17 14:10:00   \n",
       "2   2023-04-17 21:01:00                      -17      2023-04-17 18:21:00   \n",
       "3   2023-04-17 23:52:00                       21      2023-04-17 22:20:00   \n",
       "4   2023-04-17 14:55:00                      -14      2023-04-17 09:49:00   \n",
       "..                  ...                      ...                      ...   \n",
       "266 2023-04-17 20:56:00                      -11      2023-04-17 18:14:00   \n",
       "267 2023-04-17 23:07:00                       -7      2023-04-17 21:59:00   \n",
       "268 2023-04-17 14:46:00                      -12      2023-04-17 09:45:00   \n",
       "269 2023-04-17 20:44:00                      -24      2023-04-17 18:15:00   \n",
       "270 2023-04-17 00:46:00                       92      2023-04-17 21:59:00   \n",
       "\n",
       "    Actual departure time  Scheduled elapsed time (Minutes)  \\\n",
       "0     2023-04-17 09:46:00                               200   \n",
       "1     2023-04-17 14:06:00                               107   \n",
       "2     2023-04-17 18:15:00                               117   \n",
       "3     2023-04-17 22:47:00                                71   \n",
       "4     2023-04-17 09:44:00                               200   \n",
       "..                    ...                               ...   \n",
       "266   2023-04-17 18:11:00                               113   \n",
       "267   2023-04-17 22:17:00                                75   \n",
       "268   2023-04-17 09:48:00                               193   \n",
       "269   2023-04-17 18:06:00                               113   \n",
       "270   2023-04-17 23:33:00                                75   \n",
       "\n",
       "     Actual elapsed time (Minutes)  Departure delay (Minutes)  \\\n",
       "0                              198                         -3   \n",
       "1                              108                         -4   \n",
       "2                              106                         -6   \n",
       "3                               65                         27   \n",
       "4                              191                         -5   \n",
       "..                             ...                        ...   \n",
       "266                            105                         -3   \n",
       "267                             50                         18   \n",
       "268                            178                          3   \n",
       "269                             98                         -9   \n",
       "270                             73                         94   \n",
       "\n",
       "        Wheels-off time  Taxi-Out time (Minutes)  Delay Carrier (Minutes)  \\\n",
       "0   2023-04-17 10:03:00                       17                        0   \n",
       "1   2023-04-17 14:32:00                       26                        0   \n",
       "2   2023-04-17 18:35:00                       20                        0   \n",
       "3   2023-04-17 23:01:00                       14                       21   \n",
       "4   2023-04-17 09:58:00                       14                        0   \n",
       "..                  ...                      ...                      ...   \n",
       "266 2023-04-17 18:33:00                       22                        0   \n",
       "267 2023-04-17 22:31:00                       14                        0   \n",
       "268 2023-04-17 10:00:00                       12                        0   \n",
       "269 2023-04-17 18:22:00                       16                        0   \n",
       "270 2023-04-17 00:03:00                       30                       92   \n",
       "\n",
       "     Delay Weather (Minutes)  Delay National Aviation System (Minutes)  \\\n",
       "0                          0                                         0   \n",
       "1                          0                                         0   \n",
       "2                          0                                         0   \n",
       "3                          0                                         0   \n",
       "4                          0                                         0   \n",
       "..                       ...                                       ...   \n",
       "266                        0                                         0   \n",
       "267                        0                                         0   \n",
       "268                        0                                         0   \n",
       "269                        0                                         0   \n",
       "270                        0                                         0   \n",
       "\n",
       "     Delay Security (Minutes)  Delay Late Aircraft Arrival (Minutes)  \n",
       "0                           0                                      0  \n",
       "1                           0                                      0  \n",
       "2                           0                                      0  \n",
       "3                           0                                      0  \n",
       "4                           0                                      0  \n",
       "..                        ...                                    ...  \n",
       "266                         0                                      0  \n",
       "267                         0                                      0  \n",
       "268                         0                                      0  \n",
       "269                         0                                      0  \n",
       "270                         0                                      0  \n",
       "\n",
       "[271 rows x 18 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flightData = pd.merge(arrivalData, departureData, on = ['Date (MM/DD/YYYY)','Flight Number','Tail Number','Carrier Code'])\n",
    "\n",
    "flightData.drop(columns=['Tail Number','Carrier Code','Source Airport','Destination Airport'],inplace=True)\n",
    "flightData.dtypes\n",
    "flightData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cb6fa2ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date (MM/DD/YYYY)                           0\n",
       "Flight Number                               0\n",
       "Origin Airport                              0\n",
       "Scheduled Arrival Time                      0\n",
       "Actual Arrival Time                         0\n",
       "Arrival Delay (Minutes)                     0\n",
       "Scheduled departure time                    0\n",
       "Actual departure time                       0\n",
       "Scheduled elapsed time (Minutes)            0\n",
       "Actual elapsed time (Minutes)               0\n",
       "Departure delay (Minutes)                   0\n",
       "Wheels-off time                             0\n",
       "Taxi-Out time (Minutes)                     0\n",
       "Delay Carrier (Minutes)                     0\n",
       "Delay Weather (Minutes)                     0\n",
       "Delay National Aviation System (Minutes)    0\n",
       "Delay Security (Minutes)                    0\n",
       "Delay Late Aircraft Arrival (Minutes)       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flightData.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bd2d5780",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "flightData['Scheduled Arrival Time(hour)'] = flightData['Scheduled Arrival Time'].dt.hour\n",
    "flightData['Scheduled Arrival Time(minutes)'] = flightData['Scheduled Arrival Time'].dt.minute\n",
    "\n",
    "flightData['Scheduled departure time(hour)'] = flightData['Scheduled departure time'].dt.hour\n",
    "flightData['Scheduled departure time(minutes)'] = flightData['Scheduled departure time'].dt.minute\n",
    "\n",
    "flightData['Actual Arrival Time(hour)'] = flightData['Actual Arrival Time'].dt.hour\n",
    "flightData['Actual Arrival Time(minutes)'] = flightData['Actual Arrival Time'].dt.minute\n",
    "\n",
    "flightData['Actual departure time(hour)'] = flightData['Actual departure time'].dt.hour\n",
    "flightData['Actual departure time(minutes)'] = flightData['Actual departure time'].dt.minute\n",
    "\n",
    "flightData['Wheels-off time(hour)'] = flightData['Wheels-off time'].dt.hour\n",
    "flightData['Wheels-off time(minutes)'] = flightData['Wheels-off time'].dt.minute\n",
    "\n",
    "flightData.drop(columns=['Date (MM/DD/YYYY)','Scheduled Arrival Time','Actual Arrival Time','Scheduled departure time','Actual departure time','Wheels-off time'],inplace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5c3e9223",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Flight Number', 'Arrival Delay (Minutes)',\n",
       "       'Scheduled elapsed time (Minutes)', 'Actual elapsed time (Minutes)',\n",
       "       'Departure delay (Minutes)', 'Taxi-Out time (Minutes)',\n",
       "       'Delay Carrier (Minutes)', 'Delay Weather (Minutes)',\n",
       "       'Delay National Aviation System (Minutes)', 'Delay Security (Minutes)',\n",
       "       'Delay Late Aircraft Arrival (Minutes)', 'Scheduled Arrival Time(hour)',\n",
       "       'Scheduled Arrival Time(minutes)', 'Scheduled departure time(hour)',\n",
       "       'Scheduled departure time(minutes)', 'Actual Arrival Time(hour)',\n",
       "       'Actual Arrival Time(minutes)', 'Actual departure time(hour)',\n",
       "       'Actual departure time(minutes)', 'Wheels-off time(hour)',\n",
       "       'Wheels-off time(minutes)', 'Origin Airport_EWR', 'Origin Airport_IAD',\n",
       "       'Origin Airport_ORD'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "def get_ohe(df, col):\n",
    "    ohe = OneHotEncoder(drop='first', handle_unknown='error', sparse=False, dtype='int')\n",
    "    ohe.fit(df[[col]])\n",
    "    temp_df = pd.DataFrame(data=ohe.transform(df[[col]]), columns=ohe.get_feature_names_out())\n",
    "    # If you have a newer version, replace with columns=ohe.get_feature_names_out()\n",
    "    df.drop(columns=[col], axis=1, inplace=True)\n",
    "    df = pd.concat([df.reset_index(drop=True), temp_df], axis=1)\n",
    "    return df\n",
    "Final_flightData = get_ohe(flightData, 'Origin Airport')\n",
    "Final_flightData.columns\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb0aa4cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Final_flightData=Final_flightData['Flight Number','Origin Airport_EWR','Origin Airport_IAD','Origin Airport_ORD','Actual Arrival Time(hour)','Actual Arrival Time(minutes)','Arrival Delay (Minutes)']\n",
    "\n",
    "Final_flightData = Final_flightData.loc[:, ['Flight Number', 'Origin Airport_EWR', 'Origin Airport_IAD', 'Origin Airport_ORD', 'Actual Arrival Time(hour)', 'Actual Arrival Time(minutes)', 'Arrival Delay (Minutes)']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "97fa35c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flight Number</th>\n",
       "      <th>Origin Airport_EWR</th>\n",
       "      <th>Origin Airport_IAD</th>\n",
       "      <th>Origin Airport_ORD</th>\n",
       "      <th>Actual Arrival Time(hour)</th>\n",
       "      <th>Actual Arrival Time(minutes)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>1998</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>1917</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>2488</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>2198</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>2488</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>257 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Flight Number  Origin Airport_EWR  Origin Airport_IAD  \\\n",
       "124           1998                   0                   0   \n",
       "117           1917                   0                   0   \n",
       "258           2488                   1                   0   \n",
       "102           2198                   0                   1   \n",
       "193            604                   0                   0   \n",
       "..             ...                 ...                 ...   \n",
       "139            604                   0                   0   \n",
       "232            604                   0                   0   \n",
       "249           2488                   1                   0   \n",
       "33             604                   0                   0   \n",
       "201            604                   0                   0   \n",
       "\n",
       "     Origin Airport_ORD  Actual Arrival Time(hour)  \\\n",
       "124                   1                         21   \n",
       "117                   1                         16   \n",
       "258                   0                          0   \n",
       "102                   0                         23   \n",
       "193                   0                         14   \n",
       "..                  ...                        ...   \n",
       "139                   0                         14   \n",
       "232                   0                         16   \n",
       "249                   0                          5   \n",
       "33                    0                         15   \n",
       "201                   0                         14   \n",
       "\n",
       "     Actual Arrival Time(minutes)  \n",
       "124                            22  \n",
       "117                            34  \n",
       "258                            12  \n",
       "102                            20  \n",
       "193                            37  \n",
       "..                            ...  \n",
       "139                            45  \n",
       "232                             5  \n",
       "249                            46  \n",
       "33                              6  \n",
       "201                            29  \n",
       "\n",
       "[257 rows x 6 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flight Number</th>\n",
       "      <th>Origin Airport_EWR</th>\n",
       "      <th>Origin Airport_IAD</th>\n",
       "      <th>Origin Airport_ORD</th>\n",
       "      <th>Actual Arrival Time(hour)</th>\n",
       "      <th>Actual Arrival Time(minutes)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1917</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>1998</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2198</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>2488</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>1998</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2198</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>1998</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>2198</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>604</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Flight Number  Origin Airport_EWR  Origin Airport_IAD  \\\n",
       "78             604                   0                   0   \n",
       "17            1917                   0                   0   \n",
       "255           1998                   0                   0   \n",
       "23            2198                   0                   1   \n",
       "267           2488                   1                   0   \n",
       "210           1998                   0                   0   \n",
       "3             2198                   0                   1   \n",
       "182            604                   0                   0   \n",
       "212            604                   0                   0   \n",
       "177            604                   0                   0   \n",
       "72            1998                   0                   0   \n",
       "94            2198                   0                   1   \n",
       "247            604                   0                   0   \n",
       "25             604                   0                   0   \n",
       "\n",
       "     Origin Airport_ORD  Actual Arrival Time(hour)  \\\n",
       "78                    0                         15   \n",
       "17                    1                         16   \n",
       "255                   1                         21   \n",
       "23                    0                         23   \n",
       "267                   0                         23   \n",
       "210                   1                         22   \n",
       "3                     0                         23   \n",
       "182                   0                         15   \n",
       "212                   0                         14   \n",
       "177                   0                         14   \n",
       "72                    1                         21   \n",
       "94                    0                         23   \n",
       "247                   0                         15   \n",
       "25                    0                         15   \n",
       "\n",
       "     Actual Arrival Time(minutes)  \n",
       "78                             13  \n",
       "17                             43  \n",
       "255                            48  \n",
       "23                             17  \n",
       "267                             7  \n",
       "210                            25  \n",
       "3                              52  \n",
       "182                             9  \n",
       "212                            45  \n",
       "177                            52  \n",
       "72                             14  \n",
       "94                             18  \n",
       "247                            17  \n",
       "25                             12  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "124     14\n",
       "117    -13\n",
       "258     58\n",
       "102    -11\n",
       "193    -20\n",
       "      ... \n",
       "139    -12\n",
       "232     64\n",
       "249    380\n",
       "33      -3\n",
       "201    -28\n",
       "Name: Arrival Delay (Minutes), Length: 257, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "78      4\n",
       "17     -4\n",
       "255    41\n",
       "23    -14\n",
       "267    -7\n",
       "210   -14\n",
       "3      21\n",
       "182    12\n",
       "212   -12\n",
       "177    -5\n",
       "72     -4\n",
       "94    -13\n",
       "247    19\n",
       "25      3\n",
       "Name: Arrival Delay (Minutes), dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(Final_flightData.drop(columns = ['Arrival Delay (Minutes)']), Final_flightData['Arrival Delay (Minutes)'], test_size=0.05, random_state=35)\n",
    "\n",
    "X_train\n",
    "X_test\n",
    "y_train\n",
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d997efdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "if True: \n",
    "    from sklearn.preprocessing import StandardScaler\n",
    "    sc = StandardScaler()\n",
    "    X_train = pd.DataFrame(sc.fit_transform(X_train), columns = X_train.columns, index = X_train.index)\n",
    "    X_test = pd.DataFrame(sc.transform(X_test), columns = X_test.columns, index = X_test.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "88e8e18e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0.08861550471227952"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "array([  7.36501267,   5.66910053,  -2.4970423 ,  -0.0778173 ,\n",
       "       -19.7207302 ,  -3.35876662])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "7.155642023346306"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "model1 = LinearRegression(fit_intercept = True)\n",
    "model1.fit(X_train, y_train) \n",
    "\n",
    "# The following gives the R-square score\n",
    "model1.score(X_train, y_train) \n",
    "\n",
    "# This is the coefficient Beta_1, ..., Beta_17\n",
    "model1.coef_\n",
    "\n",
    "# This is the coefficient Beta_0\n",
    "model1.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7b49d92c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_Arrival Delay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>8.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>12.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>-6.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>-14.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>16.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     pred_Arrival Delay\n",
       "78                 8.54\n",
       "17                12.28\n",
       "255               -6.22\n",
       "23               -14.20\n",
       "267               16.72"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_output_a = pd.DataFrame(model1.predict(X_test), index = X_test.index, columns = ['pred_Arrival Delay'])\n",
    "# When extending to multiple features remove .array.reshape(-1, 1)\n",
    "test_output_a.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fcc51c62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_Arrival Delay</th>\n",
       "      <th>Arrival Delay (Minutes)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>8.54</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>12.28</td>\n",
       "      <td>-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>-6.22</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>-14.20</td>\n",
       "      <td>-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>16.72</td>\n",
       "      <td>-7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     pred_Arrival Delay  Arrival Delay (Minutes)\n",
       "78                 8.54                        4\n",
       "17                12.28                       -4\n",
       "255               -6.22                       41\n",
       "23               -14.20                      -14\n",
       "267               16.72                       -7"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error is : 13.939754615793914\n",
      "Error ratio is: 7.22802091189314\n"
     ]
    }
   ],
   "source": [
    "test_output_a = pd.DataFrame(model1.predict(X_test), index = X_test.index, columns = ['pred_Arrival Delay'])\n",
    "test_output_a = test_output_a.merge(y_test, left_index = True, right_index = True)\n",
    "test_output_a.head()\n",
    "mean_absolute_error = abs(test_output_a['pred_Arrival Delay'] - test_output_a['Arrival Delay (Minutes)']).mean()\n",
    "print('Mean absolute error is :',mean_absolute_error)\n",
    "error_ratio_a=mean_absolute_error/y_test.mean()\n",
    "print('Error ratio is:',error_ratio_a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "469686ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Day</th>\n",
       "      <th>Origin Airport</th>\n",
       "      <th>Flight Number</th>\n",
       "      <th>Arrival Time</th>\n",
       "      <th>Status (Early, On-time, Late, Severly Late)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-04-12</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>ORD</td>\n",
       "      <td>UA 3839</td>\n",
       "      <td>2023-04-17 10:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-04-12</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>ORD</td>\n",
       "      <td>UA 3524</td>\n",
       "      <td>2023-04-17 16:52:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-04-12</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>ORD</td>\n",
       "      <td>UA 538</td>\n",
       "      <td>2023-04-17 21:34:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-04-13</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>ORD</td>\n",
       "      <td>UA 3839</td>\n",
       "      <td>2023-04-17 10:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-04-13</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>ORD</td>\n",
       "      <td>UA 3524</td>\n",
       "      <td>2023-04-17 16:50:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date        Day Origin Airport Flight Number        Arrival Time  \\\n",
       "0 2023-04-12  Wednesday            ORD       UA 3839 2023-04-17 10:00:00   \n",
       "1 2023-04-12  Wednesday            ORD       UA 3524 2023-04-17 16:52:00   \n",
       "2 2023-04-12  Wednesday            ORD        UA 538 2023-04-17 21:34:00   \n",
       "3 2023-04-13   Thursday            ORD       UA 3839 2023-04-17 10:00:00   \n",
       "4 2023-04-13   Thursday            ORD       UA 3524 2023-04-17 16:50:00   \n",
       "\n",
       "   Status (Early, On-time, Late, Severly Late)  \n",
       "0                                          NaN  \n",
       "1                                          NaN  \n",
       "2                                          NaN  \n",
       "3                                          NaN  \n",
       "4                                          NaN  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Date                                           datetime64[ns]\n",
       "Day                                                    object\n",
       "Origin Airport                                         object\n",
       "Flight Number                                          object\n",
       "Arrival Time                                   datetime64[ns]\n",
       "Status (Early, On-time, Late, Severly Late)           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_TEST_Actual = pd.read_csv('/Users/puru/Desktop/Syracuse Courses/Sem 3/Intro to ML/Project/Dataset/project csv(Apr 12-15).csv',parse_dates=['Date','Arrival Time'])\n",
    "# parse_dates=['Date (MM/DD/YYYY)','Scheduled Arrival Time','Actual Arrival Time']\n",
    "X_TEST_Actual.head()\n",
    "X_TEST_Actual.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "725150a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date              22\n",
       "Day               22\n",
       "Origin Airport    22\n",
       "Flight Number     22\n",
       "Arrival Time      22\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_TEST_Actual.drop(columns='Status (Early, On-time, Late, Severly Late)',inplace=True)\n",
    "X_TEST_Actual.isna().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cd3b02a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_TEST_Actual.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "55c23bba",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def get_ohe(df, col):\n",
    "    ohe = OneHotEncoder(drop='first', handle_unknown='error', sparse=False, dtype='int')\n",
    "    ohe.fit(df[[col]])\n",
    "    temp_df = pd.DataFrame(data=ohe.transform(df[[col]]), columns=ohe.get_feature_names_out())\n",
    "    # If you have a newer version, replace with columns=ohe.get_feature_names_out()\n",
    "    df.drop(columns=[col], axis=1, inplace=True)\n",
    "    df = pd.concat([df.reset_index(drop=True), temp_df], axis=1)\n",
    "    return df\n",
    "X_TEST_Actual = get_ohe(X_TEST_Actual, 'Origin Airport')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cce180eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Flight Number                   int64\n",
       "Origin Airport_EWR              int64\n",
       "Origin Airport_IAD              int64\n",
       "Origin Airport_ORD              int64\n",
       "Actual Arrival Time(hour)       int64\n",
       "Actual Arrival Time(minutes)    int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_TEST_Actual['Actual Arrival Time(hour)'] = X_TEST_Actual['Arrival Time'].dt.hour\n",
    "X_TEST_Actual['Actual Arrival Time(minutes)'] = X_TEST_Actual['Arrival Time'].dt.minute\n",
    "X_TEST_Actual['Flight Number'] = X_TEST_Actual['Flight Number'].str.replace('UA', '')\n",
    "X_TEST_Actual.drop(columns=['Date','Arrival Time','Day'],inplace=True)\n",
    "\n",
    "X_TEST_Actual['Flight Number'] = X_TEST_Actual['Flight Number'].astype(int)\n",
    "X_TEST_Actual.dtypes\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c5c2577b",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc = StandardScaler()\n",
    "X_TEST_Actual = pd.DataFrame(sc.fit_transform(X_TEST_Actual), columns = X_TEST_Actual.columns, index = X_TEST_Actual.index)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "900f88a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_Arrival Delay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-28.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pred_Arrival Delay\n",
       "0               41.50\n",
       "1                4.89\n",
       "2              -28.24\n",
       "3               41.50\n",
       "4                5.22"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_output_a = pd.DataFrame(model1.predict(X_TEST_Actual), index = X_TEST_Actual.index, columns = ['pred_Arrival Delay'])\n",
    "# When extending to multiple features remove .array.reshape(-1, 1)\n",
    "test_output_a.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "19a8d93f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def flight_status(delay):\n",
    "    if delay <= -10:\n",
    "        return \"Early\"\n",
    "    elif delay >= -10 and delay <= 10:\n",
    "        return \"On-time\"\n",
    "    elif delay > 10 and delay <= 30:\n",
    "        return \"Late\"\n",
    "    else:\n",
    "        return \"Severely late\"\n",
    "\n",
    "test_output_a['Flight Status'] = test_output_a['pred_Arrival Delay'].apply(lambda x: flight_status(x))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6732f06b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_Arrival Delay</th>\n",
       "      <th>Flight Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>41.50</td>\n",
       "      <td>Severely late</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.89</td>\n",
       "      <td>On-time</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-28.24</td>\n",
       "      <td>Early</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>41.50</td>\n",
       "      <td>Severely late</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.22</td>\n",
       "      <td>On-time</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pred_Arrival Delay  Flight Status\n",
       "0               41.50  Severely late\n",
       "1                4.89        On-time\n",
       "2              -28.24          Early\n",
       "3               41.50  Severely late\n",
       "4                5.22        On-time"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_output_a.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f8849fb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test_data = pd.read_csv('/Users/puru/Desktop/Syracuse Courses/Sem 3/Intro to ML/Project/Dataset/project csv(Apr 12-15).csv',parse_dates=['Date','Arrival Time'])\n",
    "# Test_data.columns\n",
    "# Test_data.drop(columns=['Status (Early, On-time, Late, Severly Late)'],inplace=True)\n",
    "# Test_data.dropna(inplace = True)\n",
    "# Test_data\n",
    "# Test_data.dtypes\n",
    "# flightData.drop(columns=['Tail Number','Carrier Code','Source Airport','Destination Airport'],inplace=True)\n",
    "\n",
    "#Test_data_Final = pd.merge(Test_data, test_output_a)\n",
    "test_output_a.to_csv('/Users/puru/Desktop/Syracuse Courses/Sem 3/Intro to ML/Project/Dataset/Prediction_Data.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b04bad33",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
